[
  {
    "name": "__init__.py",
    "content": "#!/usr/bin/env python\nimport os, sys\n\nsys.path.append(os.path.dirname(os.path.realpath(__file__)))\n"
  },
  {
    "name": "agent.py",
    "content": "from typing import List\nfrom agents import Agent, handoff\n\n# Import tools and UETAContext from tools.py - fix the relative import\nfrom tools import (\n    UETAContext,\n    create_account,\n    check_balance,\n    add_funds,\n    withdraw_funds,\n    get_transaction_stats,\n    list_products,\n    place_order,\n    get_pending_orders,\n    approve_order,\n    revoke_order,\n    start_autonomous_agent,\n    stop_autonomous_agent,\n    get_audit_log,\n)\n\n# Create specialized agents for different UETA tasks\n\n# Account Management Agent\naccount_agent = Agent[UETAContext](\n    name=\"Account Manager\",\n    handoff_description=\"Agent for account and wallet management operations\",\n    instructions=\"\"\"You are a specialized account manager for the UETA e-commerce system.\n    \nYou help users with the following tasks:\n- Creating accounts\n- Checking balance\n- Adding funds to wallet\n- Withdrawing funds\n- Viewing transaction statistics\n\nAlways be precise about financial information. Before any withdrawal, verify if the user has sufficient funds.\nIf the task is related to products or orders, hand off to the appropriate specialized agent.\n    \"\"\",\n    tools=[\n        create_account,\n        check_balance,\n        add_funds,\n        withdraw_funds,\n        get_transaction_stats,\n    ],\n)\n\n# Product & Order Agent\nproduct_order_agent = Agent[UETAContext](\n    name=\"Product & Order Manager\",\n    handoff_description=\"Agent for browsing products and managing orders\",\n    instructions=\"\"\"You are a specialized product and order manager for the UETA e-commerce system.\n    \nYou help users with the following tasks:\n- Browsing available products\n- Placing orders\n- Checking pending orders\n- Approving orders\n- Revoking orders\n\nAlways verify product availability and pricing before placing orders.\nCheck if the user has sufficient funds before placing an order.\nFor account or wallet management tasks, hand off to the Account Manager agent.\nFor autonomous agent control, hand off to the System Manager agent.\n    \"\"\",\n    tools=[list_products, place_order, get_pending_orders, approve_order, revoke_order],\n)\n\n# System Management Agent\nsystem_agent = Agent[UETAContext](\n    name=\"System Manager\",\n    handoff_description=\"Agent for managing system-wide settings and autonomous operations\",\n    instructions=\"\"\"You are a specialized system manager for the UETA e-commerce system.\n    \nYou help users with the following tasks:\n- Starting the autonomous agent\n- Stopping the autonomous agent\n- Reviewing the audit log\n- System status information\n\nAlways provide clear information about the autonomous agent's behavior when users start or stop it.\nWarn users that the autonomous agent will place random orders using their account funds.\nFor account or product-related tasks, hand off to the appropriate specialized agent.\n    \"\"\",\n    tools=[start_autonomous_agent, stop_autonomous_agent, get_audit_log],\n)\n\n# Main Triage Agent\ntriage_agent = Agent[UETAContext](\n    name=\"UETA Assistant\",\n    handoff_description=\"Main assistant for the UETA e-commerce system\",\n    instructions=\"\"\"You are the main assistant for the UETA e-commerce system.\n    \nYou provide an overview of all available features in the system and help direct users to the appropriate specialized agent:\n\n1. Account Manager: For account creation, wallet management, and financial operations\n2. Product & Order Manager: For browsing products, placing orders, and order management\n3. System Manager: For controlling the autonomous agent and system-wide operations\n\nAnalyze the user's request and determine which specialized agent would be best equipped to handle it.\nIf the request spans multiple domains, you can explain the overall UETA system and then hand off to the most relevant agent.\n\nSome key features to highlight to new users:\n- The ability to create accounts and manage funds\n- Browsing and ordering products\n- The autonomous agent feature that can place orders automatically\n\nAlways be helpful and informative about the UETA system's capabilities.\n    \"\"\",\n    handoffs=[account_agent, product_order_agent, system_agent],\n)\n\n# Add cross-handoffs between agents\naccount_agent.handoffs = [triage_agent, product_order_agent, system_agent]\nproduct_order_agent.handoffs = [triage_agent, account_agent, system_agent]\nsystem_agent.handoffs = [triage_agent, account_agent, product_order_agent]\n\n# Export all agents\n__all__ = [\n    \"triage_agent\",\n    \"account_agent\",\n    \"product_order_agent\",\n    \"system_agent\",\n    \"UETAContext\",\n]\n"
  },
  {
    "name": "main.py",
    "content": "import asyncio\nimport os\nimport re\nfrom dotenv import load_dotenv\nfrom agents import Runner, trace\n\n# Fix the import - use absolute import instead of relative\nfrom agent import triage_agent, UETAContext\n\n# Load environment variables from .env file\nload_dotenv()\n\n\nasync def main():\n    # Ensure OpenAI API key is set\n    if not os.environ.get(\"OPENAI_API_KEY\"):\n        print(\"Error: OPENAI_API_KEY environment variable not set\")\n        print(\n            \"Please set it using 'export OPENAI_API_KEY=your-key' or create a .env file\"\n        )\n        return\n\n    print(\"\\n=== UETA Agent Demo ===\")\n    print(\"This demo connects the OpenAI Agents SDK to the UETA e-commerce system\")\n    print(\"Type 'exit' to quit the application\\n\")\n\n    # Initialize context\n    context = UETAContext()\n\n    # Create conversation ID for tracing\n    conversation_id = \"ueta-demo-\" + os.urandom(4).hex()\n\n    # Initialize input items\n    input_items = []\n\n    # Main conversation loop\n    while True:\n        user_input = input(\"You: \")\n\n        if user_input.lower() in (\"exit\", \"quit\", \"bye\"):\n            print(\"\\nThank you for using the UETA Agent Demo. Goodbye!\")\n            break\n\n        # Trace and run the agent\n        with trace(\"UETA Demo\", group_id=conversation_id):\n            # Add user input to the list\n            input_items.append({\"content\": user_input, \"role\": \"user\"})\n\n            # Run the agent\n            result = await Runner.run(triage_agent, input_items, context=context)\n\n            # Print agent response\n            response = result.final_output\n            if response:\n                print(f\"\\nAssistant: {response}\\n\")\n\n            # Update input items for next iteration\n            input_items = result.to_input_list()\n\n            # Debug info - current agent and context\n            current_agent = result.last_agent\n            print(f\"[DEBUG] Current agent: {current_agent.name}\")\n            print(\n                f\"[DEBUG] Context: account_id={context.account_id}, balance={context.wallet_balance}\"\n            )\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n"
  },
  {
    "name": "setup.py",
    "content": "#!/usr/bin/env python\n\nfrom setuptools import setup, find_packages\n\nsetup(\n    name=\"ueta-openai-agent\",\n    packages=find_packages(),\n)\n"
  },
  {
    "name": "tools.py",
    "content": "from typing import Dict, List, Optional\nimport re\nimport json\nimport httpx\nfrom pydantic import BaseModel\nfrom agents import function_tool, RunContextWrapper\n\nBASE_URL = \"http://localhost:6001\"  # Assuming MCP server runs on port 6001\n\nclass UETAContext(BaseModel):\n    \"\"\"Context model to store UETA state between agent calls\"\"\"\n    account_id: Optional[str] = None\n    wallet_balance: Optional[float] = None\n    last_transaction: Optional[Dict] = None\n    last_order_id: Optional[str] = None\n\n@function_tool\nasync def create_account(context: RunContextWrapper[UETAContext], deposit: float) -> str:\n    \"\"\"\n    Create a new UETA account with an initial deposit.\n    \n    Args:\n        deposit: Initial deposit amount\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/tools/ueta-create-account\",\n            json={\"deposit\": deposit}\n        )\n        response.raise_for_status()\n        data = response.json()\n        \n        # Update context with account information\n        # Format response: \"Account created successfully. ID: xxx, Wallet Balance: yyy\"\n        response_text = data[\"content\"][0][\"text\"]\n        \n        # Extract account ID from response\n        account_id_match = re.search(r\"ID: ([a-zA-Z0-9-]+)\", response_text)\n        balance_match = re.search(r\"Balance: (\\d+\\.?\\d*)\", response_text)\n        \n        if account_id_match and balance_match:\n            context.context.account_id = account_id_match.group(1)\n            context.context.wallet_balance = float(balance_match.group(1))\n        \n        return response_text\n\n@function_tool\nasync def check_balance(context: RunContextWrapper[UETAContext]) -> str:\n    \"\"\"\n    Check the current wallet balance.\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(f\"{BASE_URL}/tools/ueta-check-balance\", json={})\n        response.raise_for_status()\n        data = response.json()\n        \n        response_text = data[\"content\"][0][\"text\"]\n        \n        # Update context balance\n        balance_match = re.search(r\"balance: (\\d+\\.?\\d*)\", response_text)\n        if balance_match:\n            context.context.wallet_balance = float(balance_match.group(1))\n            \n        return response_text\n\n@function_tool\nasync def add_funds(context: RunContextWrapper[UETAContext], amount: float) -> str:\n    \"\"\"\n    Add funds to the wallet.\n    \n    Args:\n        amount: Amount to add to the wallet\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/tools/ueta-add-funds\",\n            json={\"amount\": amount}\n        )\n        response.raise_for_status()\n        data = response.json()\n        \n        response_text = data[\"content\"][0][\"text\"]\n        \n        # Update context balance\n        new_balance_match = re.search(r\"New balance: (\\d+\\.?\\d*)\", response_text)\n        if new_balance_match:\n            context.context.wallet_balance = float(new_balance_match.group(1))\n            \n        return response_text\n\n@function_tool\nasync def withdraw_funds(context: RunContextWrapper[UETAContext], amount: float) -> str:\n    \"\"\"\n    Withdraw funds from the wallet.\n    \n    Args:\n        amount: Amount to withdraw from the wallet\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/tools/ueta-withdraw-funds\",\n            json={\"amount\": amount}\n        )\n        response.raise_for_status()\n        data = response.json()\n        \n        response_text = data[\"content\"][0][\"text\"]\n        \n        # Update context balance\n        new_balance_match = re.search(r\"New balance: (\\d+\\.?\\d*)\", response_text)\n        if new_balance_match:\n            context.context.wallet_balance = float(new_balance_match.group(1))\n            \n        return response_text\n\n@function_tool\nasync def list_products() -> str:\n    \"\"\"\n    List available products.\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(f\"{BASE_URL}/tools/ueta-list-products\", json={})\n        response.raise_for_status()\n        data = response.json()\n        return data[\"content\"][0][\"text\"]\n\n@function_tool\nasync def place_order(\n    context: RunContextWrapper[UETAContext], \n    sku: str, \n    quantity: int\n) -> str:\n    \"\"\"\n    Place an order for a product.\n    \n    Args:\n        sku: Product SKU\n        quantity: Quantity to order\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/tools/ueta-place-order\",\n            json={\"sku\": sku, \"quantity\": quantity, \"agentMode\": False}\n        )\n        response.raise_for_status()\n        data = response.json()\n        \n        response_text = data[\"content\"][0][\"text\"]\n        \n        # Update context with order information\n        # Try to extract order ID and updated balance\n        order_match = re.search(r\"Order details: ({.*})\", response_text)\n        if order_match:\n            try:\n                order_details = json.loads(order_match.group(1))\n                context.context.last_order_id = order_details.get(\"id\")\n            except json.JSONDecodeError:\n                pass\n                \n        balance_match = re.search(r\"Updated wallet balance: (\\d+\\.?\\d*)\", response_text)\n        if balance_match:\n            context.context.wallet_balance = float(balance_match.group(1))\n            \n        return response_text\n\n@function_tool\nasync def get_pending_orders() -> str:\n    \"\"\"\n    Get a list of pending orders.\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(f\"{BASE_URL}/tools/ueta-get-pending-orders\", json={})\n        response.raise_for_status()\n        data = response.json()\n        return data[\"content\"][0][\"text\"]\n\n@function_tool\nasync def approve_order(order_id: str) -> str:\n    \"\"\"\n    Approve a pending order.\n    \n    Args:\n        order_id: ID of the order to approve\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/tools/ueta-approve-order\",\n            json={\"orderId\": order_id}\n        )\n        response.raise_for_status()\n        data = response.json()\n        return data[\"content\"][0][\"text\"]\n\n@function_tool\nasync def revoke_order(order_id: str) -> str:\n    \"\"\"\n    Revoke a pending order.\n    \n    Args:\n        order_id: ID of the order to revoke\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/tools/ueta-revoke-order\",\n            json={\"orderId\": order_id}\n        )\n        response.raise_for_status()\n        data = response.json()\n        return data[\"content\"][0][\"text\"]\n\n@function_tool\nasync def start_autonomous_agent() -> str:\n    \"\"\"\n    Start the autonomous agent to place random orders.\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(f\"{BASE_URL}/tools/ueta-start-autonomous-agent\", json={})\n        response.raise_for_status()\n        data = response.json()\n        return data[\"content\"][0][\"text\"]\n\n@function_tool\nasync def stop_autonomous_agent() -> str:\n    \"\"\"\n    Stop the autonomous agent.\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(f\"{BASE_URL}/tools/ueta-stop-autonomous-agent\", json={})\n        response.raise_for_status()\n        data = response.json()\n        return data[\"content\"][0][\"text\"]\n\n@function_tool\nasync def get_transaction_stats() -> str:\n    \"\"\"\n    Get transaction statistics.\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(f\"{BASE_URL}/tools/ueta-transaction-stats\", json={})\n        response.raise_for_status()\n        data = response.json()\n        return data[\"content\"][0][\"text\"]\n\n@function_tool\nasync def get_audit_log() -> str:\n    \"\"\"\n    Get the audit log.\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(f\"{BASE_URL}/tools/ueta-get-audit-log\", json={})\n        response.raise_for_status()\n        data = response.json()\n        return data[\"content\"][0][\"text\"]\n"
  }
]